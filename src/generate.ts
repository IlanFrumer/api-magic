import { resolve } from 'path';
import axios from 'axios';
import { createTypesFiles, createIndexFiles } from './createTypesFiles';
import { viteLoader } from './viteLoader';
import { OpenAPIV3 } from 'openapi-types';

export type ApiOptions = {
  container: string;
  host: string;
  swagger: string;
};

export type GeneratorOptions = {
  output: string;
  api: ApiOptions | ApiOptions[];
};

export async function generate({ output, api }: GeneratorOptions) {
  const ops = Array.isArray(api) ? api : [api];
  try {
    for (const op of ops) {
      const { swagger, host, container } = op;
      const origin = await viteLoader(host);
      const uri = origin + swagger;
      console.log(`GENERATOR: Fetch ${uri}`);

      const { data } = await axios.get<OpenAPIV3.Document>(uri);
      const header = `/** THIS FILE IS AUTOMATICALLY GENERATED FROM : ${uri} **/`;

      await createTypesFiles({
        host,
        data,
        container,
        output: resolve(output),
        header,
      });
    }

    const containers = ops.map((d) => d.container);
    await createIndexFiles({ output, containers });

    console.log(`GENERATOR: Generated successfully`);
  } catch (e) {
    const message = e instanceof Error ? e.message : 'unknown';
    console.log(`GENERATOR: Error (${message})`);
    process.exit(1);
  }
}
